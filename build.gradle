import static org.gradle.api.JavaVersion.VERSION_17

buildscript {
    Properties constants = new Properties()
    file("$projectDir/./constants.properties").withInputStream { constants.load(it) }
    ext {
        confidential_id_release_group = constants.getProperty('confidentialIdReleaseGroup')
        baseVersion = constants.getProperty('baseVersion')
        versionSuffix = constants.getProperty('versionSuffix')

        corda_release_group = constants.getProperty('cordaReleaseGroup')
        corda_release_version = constants.getProperty('cordaReleaseVersion')
        corda_gradle_plugins_version =constants.getProperty('cordaGradlePluginsVersion')
        kotlin_version = constants.getProperty('kotlinVersion')
        junit_version = constants.getProperty('junitVersion')
        slf4j_version = constants.getProperty('slf4jVersion')
        log4j_version = constants.getProperty('log4jVersion')
        corda_platform_version = constants.getProperty('cordaPlatformVersion')
        artifactory_context_url = constants.getProperty('artifactoryContextUrl')
        public_artifact_url = constants.getProperty('publicArtifactURL')

        test_module_opens = [
                '--add-opens', 'java.base/java.time=ALL-UNNAMED', '--add-opens', 'java.base/java.io=ALL-UNNAMED',
                '--add-opens', 'java.base/java.util=ALL-UNNAMED', '--add-opens', 'java.base/java.net=ALL-UNNAMED',
                '--add-opens', 'java.base/java.nio=ALL-UNNAMED', '--add-opens', 'java.base/java.lang.invoke=ALL-UNNAMED',
                '--add-opens', 'java.base/java.security.cert=ALL-UNNAMED', '--add-opens', 'java.base/java.security=ALL-UNNAMED',
                '--add-opens', 'java.base/javax.net.ssl=ALL-UNNAMED', '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
                '--add-opens', 'java.base/java.util.concurrent=ALL-UNNAMED', '--add-opens', 'java.sql/java.sql=ALL-UNNAMED'
        ]
        test_module_exports = [
                '--add-exports', 'java.base/sun.nio.ch=ALL-UNNAMED'
        ]
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "${public_artifact_url}/corda-releases" }
        maven { url "https://repo.gradle.org/gradle/libs-releases-local/" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
    }
}

plugins {
    id "org.ajoberstar.grgit" version "4.0.0"
}

apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'
apply plugin: 'corda.root-publish'

// If the command line project option -PversionFromGit is added to the gradle invocation, we'll resolve
// the latest git commit hash and timestamp and create a version postfix from that
if (project.hasProperty("versionFromGit")) {
    ext.versionSuffix = "${grgit.head().dateTime.format("yyyyMMdd_HHmmss")}-${grgit.head().abbreviatedId}"
}

if (ext.versionSuffix != "") {
    ext.confidential_id_release_version = "${ext.baseVersion}-${ext.versionSuffix}".toString()
} else {
    ext.confidential_id_release_version = "${ext.baseVersion}".toString()
}

allprojects {
    apply plugin: 'net.corda.plugins.quasar-utils'
    apply plugin: 'org.jetbrains.kotlin.jvm'

    group "$confidential_id_release_group"
    version "$confidential_id_release_version"

    //Ensure all transitive log4J depenndencies are up to date
    configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.apache.logging.log4j') {
            details.useVersion '2.17.1'
        }
     }
    }

    quasar {
        excludePackages.addAll(
                "antlr**",
                "com.codahale**",
                "com.fasterxml.**",
                "com.github.benmanes.caffeine.**",
                "com.google.**",
                "com.lmax.**",
                "com.zaxxer.**",
                "net.bytebuddy**",
                "io.github.classgraph**",
                "io.netty*",
                "liquibase**",
                "net.i2p.crypto.**",
                "nonapi.io.github.classgraph.**",
                "org.apiguardian.**",
                "org.bouncycastle**",
                "org.codehaus.**",
                "org.h2**",
                "org.hibernate**",
                "org.jboss.**",
                "org.objenesis**",
                "org.w3c.**",
                "org.xml**",
                "org.yaml**",
                "rx**",
                "kotlin**"
        )
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://jitpack.io' }
        maven { url "https://repo.gradle.org/gradle/libs-releases-local" }
        maven { url "$public_artifact_url/corda" }
        maven { url "$public_artifact_url/corda-releases" }
        maven { url "$public_artifact_url/corda-dependencies" }
        maven { url "$public_artifact_url/corda-lib" }
        maven {
            url "$artifactory_context_url/corda-dev"
            authentication {
                basic(BasicAuthentication)
            }
            credentials {
                username = findProperty('cordaArtifactoryUsername') ?: System.getenv('CORDA_ARTIFACTORY_USERNAME')
                password = findProperty('cordaArtifactoryPassword') ?: System.getenv('CORDA_ARTIFACTORY_PASSWORD')
            }
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions {
            languageVersion = "1.8"
            apiVersion = "1.8"
            jvmTarget = VERSION_17
            javaParameters = true   // Useful for reflection.
        }
    }

    jar {
        // This makes the JAR's SHA-256 hash repeatable.
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
}

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}

cordapp {
    targetPlatformVersion corda_platform_version.toInteger()
    minimumPlatformVersion corda_platform_version.toInteger()
    workflow {
        name "Confidential Identities - New"
        vendor "Corda Open Source"
        versionId 1
    }
    signing {
        enabled false
    }
}

dependencies {
    // Corda dependencies.
    cordaProvided "$corda_release_group:corda-core:$corda_release_version"
    cordaProvided "$corda_release_group:corda-node-api:$corda_release_version"

    // CorDapp dependencies.
    cordapp project(":workflows")

    cordaProvided "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    cordaProvided "org.apache.logging.log4j:log4j-web:${log4j_version}"
    cordaProvided "org.slf4j:jul-to-slf4j:$slf4j_version"
}

def publishProjects = [project(":workflows")]

configure(publishProjects) { subproject ->
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'corda.common-publishing'

    task sourceJar(type: Jar, dependsOn: subproject.classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: subproject.javadoc) {
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }

    task install(dependsOn: 'publishToMavenLocal')

    publishing {
        publications {
            create(subproject.name, MavenPublication) {
                from components.java

                groupId subproject.group
                artifactId "ci-${subproject.name}"
                artifact tasks.sourceJar
                artifact tasks.javadocJar

                pom {
                    name = subproject.name
                    description = "confidential-identities ${subproject.name}"
                    url = 'https://github.com/corda/confidential-identities'
                    scm {
                        url = 'https://github.com/corda/confidential-identities'
                    }
                    licenses {
                        license {
                            name = 'Apache-2.0'
                            url = 'https://www.apache.org/licenses/LICENSE-2.0'
                            distribution = 'repo'
                        }
                    }
                    developers {
                        developer {
                            id = 'R3'
                            name = 'R3'
                            email = 'dev@corda.net'
                        }
                    }
                }
            }
        }
    }
}

wrapper {
    gradleVersion = "7.6"
    distributionType = Wrapper.DistributionType.ALL
}
